#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'termux-microphone-record' \
    'termux-api'
}

# shellcheck disable=SC2034
_global_variables() {
  recording_date=""
  out_file=""
  bit_rate=""
  recording_length=""
  recording_method=""
  color=""
  quiet=""
}

# Add a fade to audio file
# $1: input video file
# $2: delay seconds
# $3: output video file
_audiorecord() {
  local \
    _rate="${1}" \
    _length="${2}" \
    _method="${3}" \
    _out=(
      "${4}"
    ) \
    _recorder_opts=() \
    _recorder
  if [[ "${_method}" == "termux" ]]; then
    _recorder="termux-microphone-record"
    _recorder_opts+=(
      -l
        "${_length}"
    )
  fi
  _msg_info \
    "out: ${_out[*]}"
  _recorder_opts+=(
    -b
      "${_rate}"
  )
  "${_recorder}" \
    "${_recorder_opts[@]}" \
    -f \
    "${_out[*]}"
  if [[ "${_method}" == "termux" ]]; then
    sleep \
      "${_length}"
  fi
}

_set_overrides() {
  _set_override \
    "recording" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "recording" \
    "method" \
    "termux"
  _set_override \
    "bit" \
    "rate" \
    "480000" # 480 Kb?
  _set_override \
    "recording" \
    "length" \
    "$(( 2 * 60 ))" # 24 hours
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Recording date:   $(_get "recording" "date")"
  _msg_info "         Recording method:   $(_get "recording" "method")"
  _msg_info "                 Bit rate:   $(_get "bit" "rate")"
  _msg_info "                   Length:   $(_get "recording" "length")"
  _msg_info "              Output file:   $(_get "out" "file")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Audio record

Usage:
  $(_get "app" "name")
    [options]
    (<out_file>)
  options:
     -b                   Audio bitrate (for supported methods).
                          Default: $(_get "bit" "rate").
     -l                   Length of the recording.
                          Default: $(_get "recording" "length").
     -m                   Recording method.
                          Default: $(_get "recording" "method").
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'b:l:m:scvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_bit_rate="${OPTARG}" ;;
    l) override_recording_length="${OPTARG}" ;;
    m) override_recording_method="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _set_overrides && \
  _usage \
    1
(( $# == 1 )) && \
  out_file="${1}"
_set_overrides
_config_user_init \
  "$(_get "app" "name")"
app_opts=(
  "${bit_rate}" \
  "${recording_length}" \
  "${recording_method}" \
  "${out_file}"
)
_show_config
_audiorecord \
  "${app_opts[@]}"
